Function New-PSModule {
    <#
    .SYNOPSIS
        Creates a new PowerShell module.
    .DESCRIPTION
        This function creates a new PowerShell module with the specified name.
    .NOTES
        This function requires PowerShell version 3.0 or above.
    .LINK
        https://docs.microsoft.com/en-us/powershell/scripting/developer/module/how-to-write-a-powershell-module-manifest?view=powershell-7.1
    #>

    [CmdletBinding()]
    param (
        # Author of the Module
        [Parameter(Mandatory)]
        [string]
        $Author,
        # #Name of the module 
        [Parameter(Mandatory = $true)]
        [string]
        $ModuleName,
        # This parameter needs to point to the path that contains all the function files.
        # Tests.ps1 & WIP_* files will be ignored.
        [Parameter(Mandatory = $true)]
        [string]
        $Source,
        # Path to were the module 
        [Parameter(Mandatory)]
        [string]
        $Destination
    )

    #* Get Source folder content.
    #region

    $ListFiles = Get-ChildItem -Path:"$Source" -Recurse -Filter:"*.ps1" | 
    Where-Object { ($_.Name -NotLike "*Tests.ps1") -and ($_.Name -NotLike "WIP_*") } | Sort-Object

    If ($ListFiles) {
        Write-Verbose "Found $($ListFiles.Count) functions to add"
    }
    else {
        Write-Verbose "No functions to add found in $Source"
        throw "No functions to add found in $Source"
    }

    #endregion

    #* Module Synopsis
    #region
    Write-Verbose "Creating module synopsis"
    $ModuleSynopsis = @"
#
# Modulefile for module `'$ModuleName`'
#
# Generated by: $Author
#
# Generated on: $(Get-Date)
#


"@

    #endregion

    #* Functions Code
    #region

    $FunctionsCode = $ListFiles | ForEach-Object {
        Write-Verbose "Adding function $($_.BaseName)"
        
        @"

#* $($_.BaseName)
#region

$(Get-Content -Path $_.FullName -Raw)

#endregion

"@
    }

    #endregion

    #* Export Module file to destination
    #region

    Write-Verbose "Exporting module file to $Destination\$ModuleName.psm1"
    New-Item -Path "$Destination\$ModuleName.psm1" `
        -ItemType File `
        -Value $($ModuleSynopsis + $FunctionsCode) -Force | Out-Null

    #endregion

    #* Return public functions
    #region

    return $ListFiles | Where-Object FullName -Like "*\Public\*" | Select-Object BaseName -ExpandProperty BaseName

    #endregion

}